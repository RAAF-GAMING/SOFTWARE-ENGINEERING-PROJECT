package acquistosistema;
// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class TestAcquistoProdotto {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
	 System.setProperty("webdriver.chrome.driver", "test/acquistosistema/chromedriver.exe");
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void testAcquistoDeiProdottiNonAutenticato() {
    // Test name: TestAcquistoDeiProdotti_NonAutenticato
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/RAAF-GAMING/servletcarrello | 
    driver.get("http://localhost:8080/RAAF-GAMING/servletcarrello");
    // 2 | click | name=indirizzodiconsegna | 
    driver.findElement(By.name("indirizzodiconsegna")).click();
    // 3 | type | name=indirizzodiconsegna | viale croce
    driver.findElement(By.name("indirizzodiconsegna")).sendKeys("viale croce");
    // 4 | click | css=.btn-outline-warning | 
    driver.findElement(By.cssSelector(".btn-outline-warning")).click();
    // 5 | assertTitle | LOGIN | 
    assertThat(driver.getTitle(), is("LOGIN"));
  }
  @Test
  public void testAcquistoDeiProdottiNessunProdotto() {
    // Test name: TestAcquistoDeiProdotti_NessunProdotto
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/RAAF-GAMING/servletcarrello | 
    driver.get("http://localhost:8080/RAAF-GAMING/servletcarrello");
    // 2 | click | css=.btn-outline-warning | 
    driver.findElement(By.cssSelector(".btn-outline-warning")).click();
    // 3 | assertAlert | Non hai prodotti nel carrello | 
    assertThat(driver.switchTo().alert().getText(), is("Non hai prodotti nel carrello"));
  }
  @Test
  public void testAcquistoDeiProdottiIndirizzoDiConsegnaNonValido() {
    // Test name: TestAcquistoDeiProdotti_IndirizzoDiConsegnaNonValido
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/RAAF-GAMING/servletcarrello | 
    driver.get("http://localhost:8080/RAAF-GAMING/servletcarrello");
    // 2 | setWindowSize | 1366x728 | 
    driver.manage().window().setSize(new Dimension(1366, 728));
    // 3 | click | name=indirizzodiconsegna | 
    driver.findElement(By.name("indirizzodiconsegna")).click();
    // 4 | type | name=indirizzodiconsegna | fgfffggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg
    driver.findElement(By.name("indirizzodiconsegna")).sendKeys("fgfffggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg");
    // 5 | click | css=.btn-outline-warning | 
    driver.findElement(By.cssSelector(".btn-outline-warning")).click();
    // 6 | assertAlert | INDIRIZZO DI CONSEGNA NON VALIDO! | 
    assertThat(driver.switchTo().alert().getText(), is("INDIRIZZO DI CONSEGNA NON VALIDO!"));
    // 7 | close |  | 
    driver.close();
  }
  @Test
  public void testAcquistoDeiProdottiRiuscito() {
    // Test name: TestAcquistoDeiProdotti_Riuscito
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/RAAF-GAMING/servletcarrello | 
    driver.get("http://localhost:8080/RAAF-GAMING/servletcarrello");
    // 2 | click | name=indirizzodiconsegna | 
    driver.findElement(By.name("indirizzodiconsegna")).click();
    // 3 | type | name=indirizzodiconsegna | viale croce
    driver.findElement(By.name("indirizzodiconsegna")).sendKeys("viale croce");
    // 4 | click | css=.btn-outline-warning | 
    driver.findElement(By.cssSelector(".btn-outline-warning")).click();
    // 5 | assertText | name=acquisto | Acquisto Confermato
    assertThat(driver.findElement(By.name("acquisto")).getText(), is("Acquisto Confermato"));
  }
  @Test
  public void testAcquistoDeiProdottiProdottoNonDisponibile() {
    // Test name: TestAcquistoDeiProdotti_ProdottoNonDisponibile
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/RAAF-GAMING/servletcarrello | 
    driver.get("http://localhost:8080/RAAF-GAMING/servletcarrello");
    // 2 | setWindowSize | 1366x728 | 
    driver.manage().window().setSize(new Dimension(1366, 728));
    // 3 | click | name=indirizzodiconsegna | 
    driver.findElement(By.name("indirizzodiconsegna")).click();
    // 4 | type | name=indirizzodiconsegna | viale traiano
    driver.findElement(By.name("indirizzodiconsegna")).sendKeys("viale traiano");
    // 5 | click | css=.btn-outline-warning | 
    driver.findElement(By.cssSelector(".btn-outline-warning")).click();
    // 6 | verifyTitle | CARRELLO | 
    assertThat(driver.getTitle(), is("CARRELLO"));
    // 7 | assertText | name=prodottoNonDisponibile | Qualche o tutti i prodotti nel carrello non sono più disponibili
    assertThat(driver.findElement(By.name("prodottoNonDisponibile")).getText(), is("Qualche o tutti i prodotti nel carrello non sono più disponibili"));
  }
  
}
